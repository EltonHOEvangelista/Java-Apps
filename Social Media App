import java.util.Scanner;
/**
 * @author Elton Evangelista
 * Using a self-defined linked list, this app manages a list of friends.
 */
/**
 * @author elton
 *
 */
public class SocialMediaApp {

	/**
	 * @param args
	 */
	
	private static LList<Person> list = new LList<>();	//instantiate Person on LList (linkedList)
	private static Scanner input = new Scanner(System.in);	//to read user input throughout the class.
	private static int menuChoice;	//menu selected
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//variable to store menu choice
		String[][] menu = new String[][] {{"1","Add a person to the list."},{"2","Add a person at a particular position to the list."},
										  {"3", "Remove a person."},{"4", "Clear the list."},
										  {"5", "Display the information of everyone in the list."}, {"6", "Search a person."},
										  {"7", "Add or remove friends."}, {"8", "Count the number of people on the list"},
										  {"9", "Check if the list is empty."}, {"10", "Exit"}};
										  
		do {
			
			displayHeaderMenu();		//display menu
			for (int i=0;i<menu.length;i++) {
				for (int j=0;j<menu[i].length;j++) {	
					System.out.print("| " + menu[i][j]);
				}
				System.out.println();
			}
			System.out.println();
			System.out.print("Choose one of the options from the menu above (1-10):");
			menuChoice = tryParseInt(input.next());
										//end of menu
		
			switch(menuChoice) {		//menu choice
			
				case 1:		//Add a person to the list.
					addPerson();
					
					break;
					
				case 2:		//Add a person at a particular position to the list.
					addPersonPosition();
					
					break;
					
				case 3:		//Remove a person.				
					removePerson();
					
					break;
					
				case 4:		//Clear the list.
					clearList();
					
					break;
					
				case 5:		//Display the information of everyone in the list.
					displayPersonsInfo();
					
					break;
					
				case 6:		//Search a person.
					searchPerson();
					
					break;
					
				case 7:		//Add or remove friends.
					manageFriends();
					
					break;
					
				case 8:		//Count the number of people on the list.
					countPeopleOnList();
					
					break;
					
				case 9:		//Check if the list is empty
					checkEmptlist();
					
					break;
					
				case 10:	//Exit
					System.out.println("Goodbye!");	
					
					break;
					
				default:	//invalid option
					System.out.print("Invalid option. Please, choose one of the option from 1 to 10): ");
					System.out.println();
			}		
		}
		while (menuChoice != 10);	//exit = 10
		
		input.close();
	}

	/**
	 * method to search a person on the list.
	 */
	private static void searchPerson() {
		// TODO Auto-generated method stub
		
		if (list.getLength() == 0) {			//check if the list is empty.
			displayHeaderMenu();	//display menu
			System.out.println("(search a person on the list)");
			System.out.println("-------------------------------");
			System.out.println("People's list is empty.");
			System.out.println("-------------------------------");
			System.out.println();
		}
		else {
			
			String name;
			String email;
			boolean found = false;
			
			displayHeaderMenu();	//display menu
			System.out.println("(search a person on the list)");
			System.out.println("-------------------------------");	
			System.out.println("Enter 1 to search by name or 2 by email: ");
			menuChoice = tryParseInt(input.next());
			
			switch(menuChoice) {
			
			case 1:		//search for person by name
				System.out.println("Enter name: ");
				name = input.next();
				for (int i=1;i<=list.getLength();i++) {
					if (list.getEntry(i).getName().equals(name)) {
						
						//display person's information
						System.out.println("---------------------------------------------------------");
						System.out.println("|" + i + "| " + list.getEntry(i).getName() + " Email: " + list.getEntry(i).getEmail() 
								+ " Location: " + list.getEntry(i).getLocation());
						System.out.println(list.getEntry(i).getName() + "'s friends list:");
						for (int j=1;j<=list.getEntry(i).getlFriends().getLength();j++){
							System.out.println("|" + j + "| " + list.getEntry(i).getlFriends().getEntry(j));
						}
						System.out.println("---------------------------------------------------------");
						found = true;
						break;
					}
					
				}
				if (found == false) {
					System.out.println("---------------------------------------------------------");
					System.out.println("Person not found.");
					System.out.println("---------------------------------------------------------");
				}
				break;
				
			case 2:		//search for person by email
				System.out.println("Enter email: ");
				email = input.next();
				for (int i=1;i<=list.getLength();i++) {
					if (list.getEntry(i).getEmail().equals(email)) {
						
						//display person's information
						System.out.println("---------------------------------------------------------");
						System.out.println("|" + i + "| " + list.getEntry(i).getName() + " Email: " + list.getEntry(i).getEmail() 
								+ " Location: " + list.getEntry(i).getLocation());
						System.out.println(list.getEntry(i).getName() + "'s friends list:");
						for (int j=1;j<=list.getEntry(i).getlFriends().getLength();j++){
							System.out.println("|" + j + "| " + list.getEntry(i).getlFriends().getEntry(j));
						}
						System.out.println("---------------------------------------------------------");
						found = true;
						break;
					}
					
				}
				if (found == false) {
					System.out.println("---------------------------------------------------------");
					System.out.println("Person not found.");
					System.out.println("---------------------------------------------------------");
				}
				break;
			
			default:
				System.out.println("Invalid name. Operation canceled.");
				System.out.println();
			}
		}
	}

	/**
	 * Method to display the information of everyone in the list
	 */
	private static void displayPersonsInfo() {
		// TODO Auto-generated method stub
		
		if (list.getLength() == 0) {
			displayHeaderMenu();	//display menu
			System.out.println("(display the information of everyone in the list)");
			System.out.println("-------------------------------");
			System.out.println("People's list is empty.");
			System.out.println("-------------------------------");
			System.out.println();
		}
		else {

			displayHeaderMenu();	//display menu
			System.out.println("(display the information of everyone in the list)");
			System.out.println("============================================================");
			System.out.println("Registered names:");
			for(int i=1;i<=list.getLength();i++) {
				System.out.println("|" + i + "| " + list.getEntry(i).getName() + " Email: " + list.getEntry(i).getEmail() 
						+ " Location: " + list.getEntry(i).getLocation());
				System.out.println(list.getEntry(i).getName() + "'s friend list:");
				for (int j=1;j<=list.getEntry(i).getlFriends().getLength();j++){
					System.out.println("|" + j + "| " + list.getEntry(i).getlFriends().getEntry(j));
				}
				System.out.println("---------------------------------------------------------");
			}
			System.out.println("============================================================");
			System.out.println();
		}
	}

	/**
	 * method to count the number of people on the list.
	 */
	private static void countPeopleOnList() {
		// TODO Auto-generated method stub
		
		displayHeaderMenu();	//display menu
		System.out.println("(Count the number of people on the list)");
		System.out.println("-------------------------------");
		System.out.println("The list has " + list.getLength() + " person(s) registered.");
		System.out.println("-------------------------------");
		System.out.println();
		
	}

	/**
	 * method to check if the list is empty.
	 */
	private static void checkEmptlist() {
		// TODO Auto-generated method stub
		
		if (list.getLength() == 0) {
			displayHeaderMenu();	//display menu
			System.out.println("(Check if the list is empty)");
			System.out.println("-------------------------------");
			System.out.println("People's list is empty.");
			System.out.println("-------------------------------");
			System.out.println();
		}
		else {

			displayHeaderMenu();	//display menu
			System.out.println("(Check if the list is empty)");
			System.out.println("-------------------------------");
			System.out.println("Registered names:");
			for(int i=1;i<=list.getLength();i++) {
				System.out.println("|" + i + "| " + list.getEntry(i).getName());
			}
			System.out.println("-------------------------------");
			System.out.println();
		}
	}

	/**
	 * method to clear/remove all entries
	 */
	private static void clearList() {		
		// TODO Auto-generated method stub
		
		if (list.getLength() == 0) {
			System.out.println("People's list is empty. Operation canceled.");
			System.out.println();
		}
		else {
			System.out.println("Are you sure you want to clear the list?(Y):");
			if (input.next().equals("Y")) {
				list.removeAllEntry();
			}
		}
	}

	/**
	 * method to remove a person.
	 */
	private static void removePerson() {	
		// TODO Auto-generated method stub
		
		if (list.getLength() == 0) {
			System.out.println("People's list is empty. Operation canceled.");
			System.out.println();
		}
		else {
			
			int idName;
			
			displayHeaderMenu();	//display menu
			System.out.println("(Remove a person)");
			System.out.println("-------------------------------");
			System.out.println("Registered names:");
			for(int i=1;i<=list.getLength();i++) {
				System.out.println("|" + i + "| " + list.getEntry(i).getName());
			}
			System.out.println("-------------------------------");
			System.out.println();
			System.out.println("Enter the number of the person to be deleted (1/" + list.getLength() + ")");
			idName = tryParseInt(input.next());
			
			if ((idName >= 1) && (idName <= list.getLength())) {
				list.removeEntryGivenPosition(idName);
			}
			else {
				System.out.println("Invalid name. Operation canceled.");
				System.out.println();
			}
		}
	}

	/**
	 * method to add a person at a particular position to the list
	 */
	private static void addPersonPosition() {
		// TODO Auto-generated method stub
		
		if (list.getLength() == 0) {
			System.out.println("People's list is empty. Operation canceled.");
			System.out.println();
		}
		else {
			
			String name;
			String email;
			String location;
			int position;
			
			displayHeaderMenu();	//display menu
			System.out.println("(Add a person at a particular position to the list)");
			System.out.println("-------------------------------");
			System.out.println("Registered names:");
			for(int i=1;i<=list.getLength();i++) {
				System.out.println("|" + i + "| " + list.getEntry(i).getName());
			}
			System.out.println("-------------------------------");
			System.out.println();
			System.out.println("Enter the desired position number (1/" + list.getLength() + ")");
			position = tryParseInt(input.next());
			
			if ((position >= 1) && (position <= list.getLength())) {
				
				System.out.println("Enter name: ");
				name = input.next();
				
				System.out.println("Enter email: ");
				email = input.next();
				
				System.out.println("Enter person's location: ");
				location = input.next();
				
				list.addNewEntryGivenPosition(new Person(name, email, location), position);	//add new Node given position
				
			}
			else {
				System.out.println("Invalid name. Operation canceled.");
				System.out.println();
			}			
		}
	}

	/**
	 * method to add or remove friends.
	 */
	private static void manageFriends() {	
		// TODO Auto-generated method stub
		
		if (list.getLength() == 0) {
			System.out.println("People's list is empty. Operation canceled.");
			System.out.println();
		}
		else {
			
			int idName;
			
			displayHeaderMenu();	//display menu
			System.out.println("(add or remove friends)");
			System.out.println("-------------------------------");
			System.out.println("Registered names:");
			for(int i=1;i<=list.getLength();i++) {
				System.out.println("|" + i + "| " + list.getEntry(i).getName());
			}
			System.out.println("-------------------------------");
			System.out.println();
			System.out.println("Enter a number listed above (1/" + list.getLength() + ")");
			idName = tryParseInt(input.next());
			
			if ((idName >= 1) && (idName <= list.getLength())) {
				System.out.println();
				System.out.println("-------------------------------");
				System.out.println(list.getEntry(idName).getName() + "'s friends list:");
				System.out.println();
				for(int i=1;i<=list.getEntry(idName).getlFriends().getLength();i++) {
					System.out.println("|" + i + "| " + list.getEntry(idName).getlFriends().getEntry(i));
				}
				System.out.println("-------------------------------");
				System.out.println();
				System.out.println("Enter 1 to add a new friend or 2 to remove one:");
				menuChoice = tryParseInt(input.next());
				
				switch(menuChoice) {
				
				case 1:
					//Add a new friend to the list
					do {
						System.out.println("Enter friend's name:");
						list.getEntry(idName).addFriend(input.next());
						System.out.println("Enter 1 to add another friend or 0 to return:");
						menuChoice = tryParseInt(input.next());
					}
					while(menuChoice == 1);
					break;
					
				case 2:
					//remove a new friend from the list
					
					if (list.getEntry(idName).getlFriends().getLength() == 0) {
						System.out.println("Friends list is empty. Operation canceled.");
						System.out.println();
					}
					else {
						System.out.println("Enter friend's number listed above (1/" + list.getEntry(idName).getlFriends().getLength() + ") or 0 to remove all or any other key to cancel:");
						menuChoice = tryParseInt(input.next());
						
						if (menuChoice == 0) {
							list.getEntry(idName).getlFriends().removeAllEntry();
						}
						else if ((menuChoice>=1) && (menuChoice<=list.getEntry(idName).getlFriends().getLength()) ){
							list.getEntry(idName).getlFriends().removeEntryGivenPosition(menuChoice);
						}
						else {
							System.out.print("Operation canceled.");
							System.out.println();
						}
					}
					break;
					
				default:
					System.out.println("Invalid name. Operation canceled.");
					System.out.println();
				}
			}
			else {
				System.out.println("Invalid name. Operation canceled.");
				System.out.println();
			}
		}
	}

	/**
	 * Method to add a person to the list
	 */
	private static void addPerson() {		
		// TODO Auto-generated method stub
		
		String name;
		String email;
		String location;
		
		displayHeaderMenu();	//display menu
		System.out.println("(add new person to the list)");
		
		System.out.println("Enter name: ");
		name = input.next();
		
		System.out.println("Enter email: ");
		email = input.next();
		
		System.out.println("Enter person's location: ");
		location = input.next();
		
		list.addNewEntry(new Person(name, email, location));	//add new Node
		
		/*
		System.out.println("Do you want to add " + name + "'s friend list? (y/n)");
		if (input.next().equals("y")) {
			//add friends
			System.out.println("Test");
			name = input.next();
		} */
	}
	
	/**
	 * method to display menu header.
	 */
	private static void displayHeaderMenu() {		
		// TODO Auto-generated method stub
		System.out.println();
		System.out.println("******************************************************************************************");
		System.out.println("*                                   Social Media App                                     *");
		System.out.println("******************************************************************************************");
		System.out.println("Menu option: ");
	}

	/**
	 * @param input
	 * @return integer
	 * method TryParseInt
	 */
	private static int tryParseInt(String input) {		
		// TODO Auto-generated method stub
		
		try {
			return Integer.parseInt(input);
		}
		catch(Exception e) {			
			return 99;
		}
	}

}
